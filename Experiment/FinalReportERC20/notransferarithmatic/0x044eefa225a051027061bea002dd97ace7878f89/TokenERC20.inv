Daikon version 5.8.6, released December 2, 2020; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:
Warning: Daikon is using a dataflow hierarchy analysis on a data trace that does not appear to be over a program execution, consider running Daikon with the --nohierarchy flag.

===========================================================================
TokenERC20.transfer(address,uint256):::EXIT1
this == orig(this)
this.decimals == orig(this.decimals)
this.totalSupply == orig(this.totalSupply)
this.totalSupply == sum(this.balanceOf[].getValue())
this.balanceOf == orig(this.balanceOf)
this.allowance == orig(this.allowance)
this.allowance[].getSubLength() == orig(this.allowance[].getSubLength())
_to == orig(_to)
_value == orig(_value)
_value == this.balanceOf[orig(_to)].getValue()
msg.sender == orig(msg.sender)
msg.value == orig(msg.value)
msg.value == sum(this.allowance[].getSubValue())
msg.value == orig(this.allowance[post(pair(_to,msg.sender))].getSubValue())
block.timestamp == orig(block.timestamp)
orig(this.totalSupply) == sum(this.balanceOf[].getValue())
orig(_value) == this.balanceOf[orig(_to)].getValue()
orig(msg.value) == sum(this.allowance[].getSubValue())
orig(msg.value) == orig(this.allowance[post(pair(_to,msg.sender))].getSubValue())
sum(this.allowance[].getSubLength()) == sum(orig(this.allowance[].getSubLength()))
sum(this.allowance[].getSubValue()) == orig(this.allowance[post(pair(_to,msg.sender))].getSubValue())
this.decimals == 18
this.totalSupply == 1000000000000000000000000000
this.balanceOf has only one value
this.balanceOf[].getValue() elements >= 0
this.allowance has only one value
_value one of { 1000000000000000000000, 10000000000000000000000, 1000000000000000000000000000 }
msg.value == 0
block.timestamp one of { 1611069671, 1611072887, 1619294655 }
orig(this) has only one value
orig(this.decimals) == 18
orig(this.totalSupply) == 1000000000000000000000000000
orig(_value) one of { 1000000000000000000000, 10000000000000000000000, 1000000000000000000000000000 }
orig(msg.value) == 0
orig(block.timestamp) one of { 1611069671, 1611072887, 1619294655 }
sum(this.balanceOf[].getValue()) == 1000000000000000000000000000
sum(this.allowance[].getSubLength()) == 0
sum(this.allowance[].getSubValue()) == 0
this.balanceOf[orig(_to)].getValue() one of { 1000000000000000000000, 10000000000000000000000, 1000000000000000000000000000 }
this.balanceOf[orig(msg.sender)].getValue() one of { 0, 999989000000000000000000000, 999999000000000000000000000 }
orig(this.balanceOf[post(msg.sender)].getValue()) one of { 999999000000000000000000000, 1000000000000000000000000000 }
orig(this.allowance[post(pair(_to,msg.sender))].getSubValue()) == 0
Exiting Daikon.
