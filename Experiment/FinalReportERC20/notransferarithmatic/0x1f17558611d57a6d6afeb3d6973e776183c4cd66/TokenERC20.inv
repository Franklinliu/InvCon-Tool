Daikon version 5.8.6, released December 2, 2020; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:
Warning: Daikon is using a dataflow hierarchy analysis on a data trace that does not appear to be over a program execution, consider running Daikon with the --nohierarchy flag.

===========================================================================
TokenERC20.approve(address,uint256):::EXIT2
this == orig(this)
this.decimals == this.totalSupply
this.decimals == msg.value
this.decimals == orig(this.decimals)
this.decimals == orig(this.totalSupply)
this.decimals == orig(msg.value)
this.decimals == sum(this.balanceOf[].getValue())
this.decimals == orig(this.allowance[post(pair(_spender,msg.sender))].getSubValue())
this.totalSupply == msg.value
this.totalSupply == orig(this.decimals)
this.totalSupply == orig(this.totalSupply)
this.totalSupply == orig(msg.value)
this.totalSupply == sum(this.balanceOf[].getValue())
this.totalSupply == orig(this.allowance[post(pair(_spender,msg.sender))].getSubValue())
this.balanceOf == orig(this.balanceOf)
this.allowance == orig(this.allowance)
this.allowance[].getSubLength() == orig(this.allowance[].getSubLength())
_spender == orig(_spender)
_value == orig(_value)
msg.sender == orig(msg.sender)
msg.value == orig(this.decimals)
msg.value == orig(this.totalSupply)
msg.value == orig(msg.value)
msg.value == sum(this.balanceOf[].getValue())
msg.value == orig(this.allowance[post(pair(_spender,msg.sender))].getSubValue())
block.timestamp == orig(block.timestamp)
orig(this.decimals) == orig(this.totalSupply)
orig(this.decimals) == orig(msg.value)
orig(this.decimals) == sum(this.balanceOf[].getValue())
orig(this.decimals) == orig(this.allowance[post(pair(_spender,msg.sender))].getSubValue())
orig(this.totalSupply) == orig(msg.value)
orig(this.totalSupply) == sum(this.balanceOf[].getValue())
orig(this.totalSupply) == orig(this.allowance[post(pair(_spender,msg.sender))].getSubValue())
orig(msg.value) == sum(this.balanceOf[].getValue())
orig(msg.value) == orig(this.allowance[post(pair(_spender,msg.sender))].getSubValue())
sum(this.balanceOf[].getValue()) == orig(this.allowance[post(pair(_spender,msg.sender))].getSubValue())
sum(this.allowance[].getSubLength()) == sum(orig(this.allowance[].getSubLength()))
this.decimals == 0
this.totalSupply == 0
this.balanceOf has only one value
this.allowance has only one value
_value == 115792089237316195423570985008687907853269984665640564039457584007913129639935
msg.value == 0
orig(this) has only one value
orig(this.decimals) == 0
orig(this.totalSupply) == 0
orig(_value) == 115792089237316195423570985008687907853269984665640564039457584007913129639935
orig(msg.value) == 0
sum(this.balanceOf[].getValue()) == 0
sum(this.allowance[].getSubLength()) == 0
orig(this.allowance[post(pair(_spender,msg.sender))].getSubValue()) == 0
this.decimals < _value
this.decimals < block.timestamp
this.decimals < orig(_value)
this.decimals < orig(block.timestamp)
this.totalSupply < _value
this.totalSupply < block.timestamp
this.totalSupply < orig(_value)
this.totalSupply < orig(block.timestamp)
msg.value < block.timestamp
msg.value < orig(_value)
msg.value < orig(block.timestamp)
block.timestamp < orig(_value)
orig(this.decimals) < orig(_value)
orig(this.decimals) < orig(block.timestamp)
orig(this.totalSupply) < orig(_value)
orig(this.totalSupply) < orig(block.timestamp)
orig(_spender) != orig(msg.sender)
orig(msg.value) < orig(block.timestamp)
Exiting Daikon.
