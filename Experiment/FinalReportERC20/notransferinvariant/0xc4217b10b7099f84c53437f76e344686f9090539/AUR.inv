Daikon version 5.8.6, released December 2, 2020; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:
Warning: Daikon is using a dataflow hierarchy analysis on a data trace that does not appear to be over a program execution, consider running Daikon with the --nohierarchy flag.

===========================================================================
AUR.approve(address,uint256):::EXIT1
this == orig(this)
this.decimals == orig(this.decimals)
this._totalSupply == orig(this._totalSupply)
this._totalSupply == sum(this.balances[].getValue())
this._totalSupply == this.balances[orig(msg.sender)].getValue()
this.balances == orig(this.balances)
this.allowed == orig(this.allowed)
spender == orig(spender)
tokens == orig(tokens)
tokens == this.allowed[pair(msg.sender,spender)].getSubValue()
msg.sender == orig(msg.sender)
msg.value == orig(msg.value)
msg.value == orig(this.allowed[post(pair(spender,msg.sender))].getSubValue())
block.timestamp == orig(block.timestamp)
orig(this._totalSupply) == sum(this.balances[].getValue())
orig(this._totalSupply) == this.balances[orig(msg.sender)].getValue()
orig(tokens) == this.allowed[pair(msg.sender,spender)].getSubValue()
orig(msg.value) == orig(this.allowed[post(pair(spender,msg.sender))].getSubValue())
sum(this.balances[].getValue()) == this.balances[orig(msg.sender)].getValue()
this.decimals == 18
this._totalSupply == 350000000000000000000000000
this.balances has only one value
this.allowed has only one value
this.allowed[].getSubLength() elements one of { 1, 2, 3 }
tokens one of { 5000000000000000000000, 115792089237316195423570985008687907853269984665640564039457584007913129639935 }
msg.value == 0
block.timestamp one of { 1612007575, 1612011437, 1612012684 }
orig(this) has only one value
orig(this.decimals) == 18
orig(this._totalSupply) == 350000000000000000000000000
orig(this.allowed[].getSubLength()) elements one of { 1, 2 }
orig(tokens) one of { 5000000000000000000000, 115792089237316195423570985008687907853269984665640564039457584007913129639935 }
orig(msg.value) == 0
orig(block.timestamp) one of { 1612007575, 1612011437, 1612012684 }
sum(this.balances[].getValue()) == 350000000000000000000000000
sum(this.allowed[].getSubLength()) one of { 1, 2, 3 }
sum(this.allowed[].getSubValue()) one of { 115792089237316195423570985008687907853269984665640564039457584007913129639935, 231584178474632390847141970017375815706539969331281128078915168015826259279870, 231584178474632390847141970017375815706539969331281128083915168015826259279870 }
sum(orig(this.allowed[].getSubLength())) one of { 0, 1, 2 }
sum(orig(this.allowed[].getSubValue())) one of { 0, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 231584178474632390847141970017375815706539969331281128078915168015826259279870 }
this.balances[orig(msg.sender)].getValue() == 350000000000000000000000000
this.allowed[pair(msg.sender,spender)].getSubValue() one of { 5000000000000000000000, 115792089237316195423570985008687907853269984665640564039457584007913129639935 }
orig(this.allowed[post(pair(spender,msg.sender))].getSubValue()) == 0
sum(this.allowed[].getSubLength()) in this.allowed[].getSubLength()
this.allowed[].getSubLength() elements == sum(this.allowed[].getSubLength())
orig(this.allowed[].getSubLength()) elements == sum(orig(this.allowed[].getSubLength()))
===========================================================================
AUR.transferFrom(address,address,uint256):::EXIT1
this == orig(this)
this.decimals == orig(this.decimals)
this._totalSupply == orig(this.balances[post(from)].getValue())
this.balances == orig(this.balances)
this.allowed == orig(this.allowed)
this.allowed[].getSubLength() == orig(this.allowed[].getSubLength())
from == orig(from)
to == orig(to)
msg.sender == orig(to)
orig(to) == orig(msg.sender)
orig(tokens) == this.balances[orig(to)].getValue()
orig(msg.value) == orig(this.allowed[post(pair(to,from))].getSubValue())
sum(this.allowed[].getSubLength()) == sum(orig(this.allowed[].getSubLength()))
this.decimals == 18
this._totalSupply == 350000000000000000000000000
this.balances has only one value
this.allowed has only one value
this.allowed[].getSubLength() elements == 3
orig(this) has only one value
orig(this.decimals) == 18
orig(tokens) == 5000000000000000000000
orig(msg.value) == 0
orig(block.timestamp) == 11757520
sum(this.allowed[].getSubLength()) == 3
sum(this.allowed[].getSubValue()) == 231584178474632390847141970017375815706539969331281128078915168015826259279870
sum(orig(this.allowed[].getSubValue())) == 231584178474632390847141970017375815706539969331281128083915168015826259279870
this.balances[orig(from)].getValue() == 349995000000000000000000000
this.balances[orig(to)].getValue() == 5000000000000000000000
orig(this.balances[post(from)].getValue()) == 350000000000000000000000000
orig(this.allowed[post(pair(to,from))].getSubValue()) == 0
sum(this.allowed[].getSubLength()) in this.allowed[].getSubLength()
this.allowed[].getSubLength() elements == sum(this.allowed[].getSubLength())
Exiting Daikon.
