Daikon version 5.8.6, released December 2, 2020; http://plse.cs.washington.edu/daikon.
Reading declaration files Processing trace data; reading 1 dtrace file:
Warning: Daikon is using a dataflow hierarchy analysis on a data trace that does not appear to be over a program execution, consider running Daikon with the --nohierarchy flag.

===========================================================================
AAPX.approve(address,uint256):::EXIT2
this == orig(this)
this.ERC20_own__balances == orig(this.ERC20_own__balances)
this.ERC20_own__allowed == orig(this.ERC20_own__allowed)
this.ERC20_own__allowed[].getSubLength() == orig(this.ERC20_own__allowed[].getSubLength())
this.ERC20_own__totalSupply == this.ERC20Detailed_own__decimals
this.ERC20_own__totalSupply == msg.value
this.ERC20_own__totalSupply == orig(this.ERC20_own__totalSupply)
this.ERC20_own__totalSupply == orig(this.ERC20Detailed_own__decimals)
this.ERC20_own__totalSupply == orig(msg.value)
this.ERC20_own__totalSupply == sum(this.ERC20_own__balances[].getValue())
this.ERC20_own__totalSupply == orig(this.ERC20_own__allowed[post(pair(spender,msg.sender))].getSubValue())
this.ERC20Detailed_own__decimals == msg.value
this.ERC20Detailed_own__decimals == orig(this.ERC20_own__totalSupply)
this.ERC20Detailed_own__decimals == orig(this.ERC20Detailed_own__decimals)
this.ERC20Detailed_own__decimals == orig(msg.value)
this.ERC20Detailed_own__decimals == sum(this.ERC20_own__balances[].getValue())
this.ERC20Detailed_own__decimals == orig(this.ERC20_own__allowed[post(pair(spender,msg.sender))].getSubValue())
spender == orig(spender)
value == orig(value)
msg.sender == orig(msg.sender)
msg.value == orig(this.ERC20_own__totalSupply)
msg.value == orig(this.ERC20Detailed_own__decimals)
msg.value == orig(msg.value)
msg.value == sum(this.ERC20_own__balances[].getValue())
msg.value == orig(this.ERC20_own__allowed[post(pair(spender,msg.sender))].getSubValue())
block.timestamp == orig(block.timestamp)
orig(this.ERC20_own__totalSupply) == orig(this.ERC20Detailed_own__decimals)
orig(this.ERC20_own__totalSupply) == orig(msg.value)
orig(this.ERC20_own__totalSupply) == sum(this.ERC20_own__balances[].getValue())
orig(this.ERC20_own__totalSupply) == orig(this.ERC20_own__allowed[post(pair(spender,msg.sender))].getSubValue())
orig(this.ERC20Detailed_own__decimals) == orig(msg.value)
orig(this.ERC20Detailed_own__decimals) == sum(this.ERC20_own__balances[].getValue())
orig(this.ERC20Detailed_own__decimals) == orig(this.ERC20_own__allowed[post(pair(spender,msg.sender))].getSubValue())
orig(msg.value) == sum(this.ERC20_own__balances[].getValue())
orig(msg.value) == orig(this.ERC20_own__allowed[post(pair(spender,msg.sender))].getSubValue())
sum(this.ERC20_own__balances[].getValue()) == orig(this.ERC20_own__allowed[post(pair(spender,msg.sender))].getSubValue())
sum(this.ERC20_own__allowed[].getSubLength()) == sum(orig(this.ERC20_own__allowed[].getSubLength()))
this.ERC20_own__balances == null
this.ERC20_own__allowed has only one value
this.ERC20_own__totalSupply == 0
this.ERC20Detailed_own__decimals == 0
msg.value == 0
orig(this) has only one value
orig(this) != null
orig(this.ERC20_own__totalSupply) == 0
orig(this.ERC20Detailed_own__decimals) == 0
orig(msg.value) == 0
sum(this.ERC20_own__balances[].getValue()) == 0
sum(this.ERC20_own__allowed[].getSubLength()) == 0
orig(this.ERC20_own__allowed[post(pair(spender,msg.sender))].getSubValue()) == 0
this.ERC20_own__totalSupply < value
this.ERC20_own__totalSupply < block.timestamp
this.ERC20_own__totalSupply < orig(value)
this.ERC20_own__totalSupply < orig(block.timestamp)
this.ERC20Detailed_own__decimals < value
this.ERC20Detailed_own__decimals < block.timestamp
this.ERC20Detailed_own__decimals < orig(value)
this.ERC20Detailed_own__decimals < orig(block.timestamp)
msg.value < block.timestamp
msg.value < orig(value)
msg.value < orig(block.timestamp)
orig(this.ERC20_own__totalSupply) < orig(value)
orig(this.ERC20_own__totalSupply) < orig(block.timestamp)
orig(this.ERC20Detailed_own__decimals) < orig(value)
orig(this.ERC20Detailed_own__decimals) < orig(block.timestamp)
orig(msg.value) < orig(block.timestamp)
===========================================================================
AAPX.transfer(address,uint256):::EXIT2
this == orig(this)
this.ERC20_own__balances == orig(this.ERC20_own__balances)
this.ERC20_own__allowed == orig(this.ERC20_own__allowed)
this.ERC20_own__allowed[].getSubLength() == orig(this.ERC20_own__allowed[].getSubLength())
this.ERC20_own__totalSupply == this.ERC20Detailed_own__decimals
this.ERC20_own__totalSupply == msg.value
this.ERC20_own__totalSupply == orig(msg.value)
this.ERC20_own__totalSupply == orig(this.ERC20_own__allowed[post(pair(to,msg.sender))].getSubValue())
this.ERC20Detailed_own__decimals == msg.value
this.ERC20Detailed_own__decimals == orig(msg.value)
this.ERC20Detailed_own__decimals == orig(this.ERC20_own__allowed[post(pair(to,msg.sender))].getSubValue())
to == orig(to)
value == orig(value)
msg.sender == orig(msg.sender)
msg.value == orig(msg.value)
msg.value == orig(this.ERC20_own__allowed[post(pair(to,msg.sender))].getSubValue())
block.timestamp == orig(block.timestamp)
orig(msg.value) == orig(this.ERC20_own__allowed[post(pair(to,msg.sender))].getSubValue())
sum(this.ERC20_own__allowed[].getSubLength()) == sum(orig(this.ERC20_own__allowed[].getSubLength()))
this.ERC20_own__balances == null
this.ERC20_own__allowed has only one value
this.ERC20_own__totalSupply == 0
this.ERC20Detailed_own__decimals == 0
value one of { 1000000000000000000, 159999000000000000000000 }
msg.value == 0
block.timestamp one of { 1615210752, 1615285109, 1615285486 }
orig(this) has only one value
orig(value) one of { 1000000000000000000, 159999000000000000000000 }
orig(msg.value) == 0
orig(block.timestamp) one of { 1615210752, 1615285109, 1615285486 }
sum(this.ERC20_own__allowed[].getSubLength()) == 0
orig(this.ERC20_own__allowed[post(pair(to,msg.sender))].getSubValue()) == 0
Exiting Daikon.
