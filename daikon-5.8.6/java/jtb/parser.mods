--- parser.new.new/JavaParser.java.test1.orig	2015-04-07 15:06:26.037347930 -0700
+++ parser.new.new/JavaParser.java.test1.modified	2015-04-07 16:01:51.371588451 -0700
@@ -1,2 +1,4 @@
+package jtb;
+
 /* Generated By:JavaCC: Do not edit this line. JavaParser.java */
 import java.io.*;
@@ -8950,7 +9009,15 @@
     else token = token.next = token_source.getNextToken();
     jj_ntk = -1;
+
+    System.out.println("token: " + token.image);
+
     if (token.kind == kind) {
       return token;
     }
+
+    Throwable stack = new Throwable("PARSE FAIL lasttok: " + oldToken.image + " curtok: " + token.image);
+    stack.fillInStackTrace();
+    stack.printStackTrace(System.out);
+
     token = oldToken;
     throw generateParseException();
@@ -8955,4 +8957,6 @@
   }
 
+  // Added by hand to remove serialize warning.  (markro)
+  @SuppressWarnings("serial")
   static private final class LookaheadSuccess extends java.lang.Error { }
   final private LookaheadSuccess jj_ls = new LookaheadSuccess();
@@ -9018,5 +9022,8 @@
          return node;
 
-      Vector temp = new Vector();
+      // Modified by hand to remove rawtypes warning.  (markro)
+      // Vector temp = new Vector();
+      Vector<NodeToken> temp = new Vector<NodeToken>();
+
       Token orig = t;
 
@@ -9027,6 +9034,9 @@
 
       // Reverse the special token list
-      for ( int i = temp.size() - 1; i >= 0; --i )
-         node.addSpecial((NodeToken)temp.elementAt(i));
+      for ( int i = temp.size() - 1; i >= 0; --i ) {
+         // Modified by hand to remove unchecked warning.  (markro)
+         // node.addSpecial((NodeToken)temp.elementAt(i));
+         node.addSpecial(temp.elementAt(i));
+      }
 
       node.trimSpecials();
